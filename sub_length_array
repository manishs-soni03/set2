#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

int maxLengthSubarrayWithSum(const vector<int>& arr, int targetSum) {
    unordered_map<int, int> sumMap;
    int maxLength = 0;
    int currentSum = 0;

    for (int i = 0; i < arr.size(); ++i) {
        currentSum += arr[i];

        if (currentSum == targetSum) {
            maxLength = i + 1;
        }

        if (sumMap.find(currentSum - targetSum) != sumMap.end()) {
            maxLength = max(maxLength, i - sumMap[currentSum - targetSum]);
        }

        if (sumMap.find(currentSum) == sumMap.end()) {
            sumMap[currentSum] = i;
        }
    }

    return maxLength;
}

int main() {
    vector<int> arr = {1, 2, 3, 4, 5};
    int targetSum = 9;
    int result = maxLengthSubarrayWithSum(arr, targetSum);
    cout << "Maximum length of subarray with sum " << targetSum << " is: " << result << endl;
    return 0;
}
